XFrame

def infer_type_of_list(data):
def load_xframe(filename):
    def _read_csv_impl
    def read_csv_with_errors
    def read_csv
    def to_schema_rdd(self, sc, sql, number_of_partitions=4):
    def to_rdd(self,sc,number_of_partitions=4):
    def from_rdd(cls, rdd):
    def __get_column_description__(self):
    def __get_pretty_tables__(self, wrap_text=False, max_row_width=80,
    def print_rows(self, num_rows=10, num_columns=40, max_column_width=30, max_row_width=80):
    def __str__(self, num_rows=10, footer=True):
    def _repr_html_(self):
    def __nonzero__(self):
    def __len__(self):
    def __copy__(self):
    def _row_selector(self, other):
    def dtype(self):
    def num_rows(self):
    def num_cols(self):
    def num_columns(self):
    def column_names(self):
    def column_types(self):
    def head(self, n=10):
    def to_dataframe(self):
    def tail(self, n=10):
    def apply(self, fn, dtype=None, seed=None):
    def flat_map(self, column_names, fn, column_types='auto', seed=None):
    def sample(self, fraction, seed=None):
    def random_split(self, fraction, seed=None):
    def topk(self, column_name, k=10, reverse=False):
    def save(self, filename, format=None):
    def select_column(self, column_name):
    def select_columns(self, keylist):
    def add_column(self, data, name=""):
    def add_columns(self, data, namelist=None):
    def remove_column(self, name):
    def remove_columns(self, column_names):
    def swap_columns(self, column_1, column_2):
    def rename(self, names):
    def __getitem__(self, key):
    def __setitem__(self, key, value):
    def __delitem__(self, key):
    def __materialize__(self):
    def __is_materialized__(self):
    def __has_size__(self):
    def __iter__(self):
    def append(self, other):
    def groupby(self, key_columns, operations, *args):
    def join(self, right, on=None, how='inner'):
    def split_datetime(self, expand_column, column_name_prefix=None, limit=None, tzone=False):
    def filter_by(self, values, column_name, exclude=False):
    def pack_columns(self, columns=None, column_prefix=None, dtype=list,
    def unpack(self, unpack_column, column_name_prefix=None, column_types=None,
    def stack(self, column_name, new_column_name=None, drop_na=False):
    def unstack(self, column, new_column_name=None):
    def unique(self):
    def sort(self, sort_columns, ascending=True):
    def dropna(self, columns=None, how='any'):
    def dropna_split(self, columns=None, how='any'):
    def __dropna_errchk(self, columns, how):
    def fillna(self, column, value):
    def add_row_number(self, column_name='id', start=0):
    def shape(self):

XArray
def _create_sequential_xarray(size, start=0, reverse=False):
    def __init__(self, data=[], dtype=None, ignore_cast_failure=False, _impl=None):
    def from_const(cls, value, size):
    def from_sequence(cls, *args):
    def __get_content_identifier__(self):
    def save(self, filename, format=None):
    def __repr__(self):
    def __str__(self):
    def __nonzero__(self):
    def __len__(self):
    def __iter__(self):
    def __add__(self, other):
    def __sub__(self, other):
    def __mul__(self, other):
    def __div__(self, other):
    def __pow__(self, other):
    def __lt__(self, other):
    def __gt__(self, other):
    def __le__(self, other):
    def __ge__(self, other):
    def __radd__(self, other):
    def __rsub__(self, other):
    def __rmul__(self, other):
    def __rdiv__(self, other):
    def __eq__(self, other):
    def __ne__(self, other):
    def __and__(self, other):
    def __or__(self, other):
    def __getitem__(self, other):
    def __materialize__(self):
    def __is_materialized__(self):
    def size(self):
    def dtype(self):
    def head(self, n=10):
    def vector_slice(self, start, end=None):
    def _count_words(self, to_lower=True):
    def _count_ngrams(self, n=2, method="word", to_lower=True, ignore_space=True):
    def dict_trim_by_keys(self, keys, exclude=True):
    def dict_trim_by_values(self, lower=None, upper=None):
    def dict_keys(self):
    def dict_values(self):
    def dict_has_any_keys(self, keys):
    def dict_has_all_keys(self, keys):
    def apply(self, fn, dtype=None, skip_undefined=True, seed=None):
    def filter(self, fn, skip_undefined=True, seed=None):
    def sample(self, fraction, seed=None):
    def _save_as_text(self, url):
    def all(self):
    def any(self):
    def max(self):
    def min(self):
    def sum(self):
    def mean(self):
    def std(self, ddof=0):
    def var(self, ddof=0):
    def num_missing(self):
    def nnz(self):
    def datetime_to_str(self,str_format="%Y-%m-%dT%H:%M:%S%ZP"):
    def str_to_datetime(self,str_format="%Y-%m-%dT%H:%M:%S%ZP"):
    def astype(self, dtype, undefined_on_failure=False):
    def clip(self, lower=float('nan'), upper=float('nan')):
    def clip_lower(self, threshold):
    def clip_upper(self, threshold):
    def tail(self, n=10):
    def dropna(self):
    def fillna(self, value):
    def topk_index(self, topk=10, reverse=False):
    def sketch_summary(self, background=False, sub_sketch_keys=None):
    def append(self, other):
    def unique(self):
    def item_length(self):
    def split_datetime(self, column_name_prefix = "X", limit=None, tzone=False):
    def unpack(self, column_name_prefix = "X", column_types=None, na_value=None, limit=None):
    def sort(self, ascending=True):
